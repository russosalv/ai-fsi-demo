services:
  banking-api:
    build:
      context: ./be
      dockerfile: Dockerfile
    container_name: banking-api
    ports:
      - "7086:443"  # Mappa la porta HTTPS
      - "5000:80"   # Mappa la porta HTTP
    volumes:
      - app-data:/persistence  # Volume per il backend su /persistence
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80;https://+:443
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/persistence/certs/banking-api.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/swagger"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  banking-frontend:
    build:
      context: ./fe
      dockerfile: Dockerfile
    container_name: banking-frontend
    ports:
      - "4200:80"
    environment:
      - API_URL=https://localhost:7086/api
    depends_on:
      banking-api:
        condition: service_healthy
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servizio per copiare il certificato dal backend per il frontend (se necessario)
  cert-extractor:
    image: alpine:latest
    container_name: cert-extractor
    volumes:
      - app-data:/backend-persistence:ro
      - ./certs:/certs
    command: >
      sh -c "
        mkdir -p /certs &&
        if [ -f /backend-persistence/certs/banking-api.crt ]; then
          cp /backend-persistence/certs/banking-api.crt /certs/
          echo 'Certificato copiato in ./certs/banking-api.crt'
        else
          echo 'Certificato non trovato in /backend-persistence/certs/'
          ls -la /backend-persistence/ || echo 'Directory non trovata'
        fi
      "
    depends_on:
      - banking-api
    networks:
      - banking-network

  # SQL Server 2022 per test - servizio indipendente
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver-test
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=TestPassword123!
      - MSSQL_PID=Express
    volumes:
      - sqlserver-data:/var/opt/mssql
    networks:
      - banking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "TestPassword123!", "-C", "-Q", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # MSSQL MCP Server in Server Mode (multi-database)
  # Configurazione Claude Desktop MCP:
  # {
  #   "servers": {
  #     "mssql": {
  #       "command": "docker",
  #       "args": [
  #         "run",
  #         "--rm",
  #         "-i",
  #         "-e", "MSSQL_CONNECTIONSTRING=Server=host.docker.internal,1433;User Id=sa;Password=TestPassword123!;TrustServerCertificate=True;",
  #         "-e", "DatabaseConfiguration__EnableExecuteQuery=true",
  #         "-e", "DatabaseConfiguration__EnableExecuteStoredProcedure=true",
  #         "-e", "DatabaseConfiguration__EnableStartQuery=true",
  #         "-e", "DatabaseConfiguration__EnableStartStoredProcedure=true",
  #         "aadversteeg/mssqlclient-mcp-server:latest"
  #       ]
  #     }
  #   }
  # }
  mssql-mcp-server:
    image: aadversteeg/mssqlclient-mcp-server:latest
    container_name: mssql-mcp-server
    environment:
      # Server Mode - no database specified for multi-database operations
      - MSSQL_CONNECTIONSTRING=Server=sqlserver-test;User Id=sa;Password=TestPassword123!;TrustServerCertificate=True;
      - DatabaseConfiguration__EnableExecuteQuery=true
      - DatabaseConfiguration__EnableExecuteStoredProcedure=true
      - DatabaseConfiguration__EnableStartQuery=true
      - DatabaseConfiguration__EnableStartStoredProcedure=true
      - DatabaseConfiguration__DefaultCommandTimeoutSeconds=60
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - banking-network
    restart: unless-stopped
    stdin_open: true  # Necessario per MCP communication
    tty: true         # Necessario per MCP communication

volumes:
  app-data:
    driver: local
  sqlserver-data:
    driver: local

networks:
  banking-network:
    driver: bridge 